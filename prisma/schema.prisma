// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DIRECT_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model User {
  id         String      @id @unique @db.Uuid
  username   String      @unique
  email      String      @unique
  created_at DateTime    @default(now())
  videos     Video[]
  likes      Like[]
  followers  Follower[]
  comments   Comment[]
  chats      Chat[]
  Report     Report[]
  posts      Post[]
  postVotes  PostVote[]
  liveViews  LiveViewer[]
}

model Video {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title      String
  uri        String
  user_id    String    @db.Uuid
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likes      Like[]
  created_at DateTime  @default(now())
  comments   Comment[]
  Report     Report[]
}

model Like {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String   @db.Uuid
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video_id      String   @db.Uuid
  video         Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
  video_user_id String
  created_at    DateTime @default(now())
}

model Follower {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String   @db.Uuid
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  follower_user_id String
  created_at       DateTime @default(now())
}

model Comment {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String   @db.Uuid
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video_id      String   @db.Uuid
  video         Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)
  video_user_id String
  text          String
  created_at    DateTime @default(now())
}

model Chat {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String   @db.Uuid
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat_user_id String
  users_key    String
  text         String
  created_at   DateTime @default(now())
}

model Report {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?  @db.Uuid
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video_id   String?  @db.Uuid
  video      Video?   @relation(fields: [video_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
}

model Post {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type        String      // 'video' or 'image'
  url         String
  caption     String
  issue_type  String      // 'environmental_hazard' or 'accident'
  latitude    Float
  longitude   Float
  location    String
  is_live     Boolean     @default(false)
  stream_id   String?
  stream_url  String?
  started_at  DateTime?
  user_id     String      @db.Uuid
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime    @default(now())
  post_votes  PostVote[]
  live_viewers LiveViewer[]
}

model PostVote {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id    String   @db.Uuid
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  vote_type  String   // 'up' or 'down'
  created_at DateTime @default(now())

  @@unique([post_id, user_id])
}

model LiveViewer {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id    String   @db.Uuid
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  joined_at  DateTime @default(now())
}
